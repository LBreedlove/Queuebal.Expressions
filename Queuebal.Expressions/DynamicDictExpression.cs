using Queuebal.Json;

namespace Queuebal.Expressions;


public class DynamicDictEntry
{
    /// <summary>
    /// The key for the dictionary entry.
    /// </summary>
    public required IExpression Key { get; set; }

    /// <summary>
    /// The value for the dictionary entry.
    /// </summary>
    public required IExpression Value { get; set; }

    /// <summary>
    /// If 'Value' produces a dictionary, the Unpack field
    /// indicates the keys in the generated dictionary should
    /// be directly placed on the output, rather than under the
    /// key specified by Key.
    /// </summary>
    public bool Unpack { get; set; } = false;

    /// <summary>
    /// An optional condition that indicates if the
    /// entry should be included in the dictionary.
    /// </summary>
    /// <remarks
    /// The input to the condition is the dictionary entry
    /// in the form of a dictionary with a single key-value pair:
    /// ```
    /// {
    ///   "<evaluated key>": "<evaluated value>"
    /// }
    /// ```
    /// </remarks>
    public ConditionExpression? Condition { get; set; }
}


public class DynamicDictExpression : Expression
{
    /// <summary>
    /// Gets the name of the expression type.
    /// This property MUST be overridden in derived classes to specify the type of expression.
    /// </summary>
    public static string ExpressionType { get; } = "DynamicDict";

    /// <summary>
    /// The list of dictionary entries evaluated to create the dictionary.
    /// </summary>
    public required List<DynamicDictEntry> Entries { get; set; }

    /// <summary>
    /// Returns the dictionary stored in this expression.
    /// </summary>
    protected override JSONValue EvaluateExpression(ExpressionContext context, JSONValue inputValue)
    {
        if (!inputValue.IsList)
        {
            throw new InvalidOperationException("DynamicDict expression can only be applied to a list input value.");
        }

        var output = new Dictionary<string, JSONValue>();
        foreach (var item in inputValue.ListValue)
        {
            foreach (var entry in Entries)
            {
                // Evaluate the key and value expressions for each entry.
                if (entry.Unpack)
                {
                    UnpackValue(context, item, entry, output);
                    continue;
                }

                var key = entry.Key.Evaluate(context, item);
                if (!key.IsString)
                {
                    throw new InvalidOperationException("DynamicDict keys must evaluate to a string.");
                }

                var value = entry.Value.Evaluate(context, item);
                if (entry.Condition != null)
                {
                    // Evaluate the condition for the entry.
                    var conditionInput = new Dictionary<string, JSONValue>
                    {
                        { "key", key.StringValue },
                        { "value", value },
                    };

                    // If the condition evaluates to false, skip this entry.
                    if (!entry.Condition.Evaluate(context, new JSONValue(conditionInput)).BooleanValue)
                    {
                        continue;
                    }
                }

                // Add the evaluated key-value pair to the dictionary.
                output[key.StringValue] = value;
            }
        }

        return output;
    }

    /// <summary>
    /// Unpacks the entries in the dict generated by 'entry.Value' into the ouptut dictionary.
    /// </summary>
    /// <param name="context">The context the expression is running in.</param>
    /// <param name="item">The current list item being processed for the entry.</param>
    /// <param name="entry">The dynamic dict entry that generates a dictionary.</param>
    /// <param name="output">The output dictionary to write the unpacked values into.</param>
    /// <exception cref="InvalidOperationException">Thrown when entry.Value does not generate a dictionary.</exception>
    private void UnpackValue(ExpressionContext context, JSONValue item, DynamicDictEntry entry, Dictionary<string, JSONValue> output)
    {
        var value = entry.Value.Evaluate(context, item);
        if (!value.IsDict)
        {
            throw new InvalidOperationException("Cannot unpack value that isn't a dictionary");
        }

        foreach (var kvp in value.DictValue)
        {
            var key = kvp.Key;
            var val = kvp.Value;

            if (entry.Condition != null)
            {
                // Evaluate the condition for the entry.
                var conditionInput = new Dictionary<string, JSONValue>
                {
                    { "key", key },
                    { "value", val },
                };

                // If the condition evaluates to false, skip this entry.
                if (!entry.Condition.Evaluate(context, new JSONValue(conditionInput)).BooleanValue)
                {
                    continue;
                }
            }

            // Add the evaluated key-value pair to the dictionary.
            output[key] = val;
        }
    }
}
